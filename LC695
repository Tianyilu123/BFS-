
class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        if(grid == null || grid.length == 0 || grid[0].length == 0) return 0;
        int m=grid.length, n=grid[0].length;
        boolean[][] visited = new boolean[m][n];
        int res = 0;
        for(int i=0; i<grid.length; i++) {
            for(int j=0; j<grid[0].length; j++) {
                if(!visited[i][j] && grid[i][j] == 1)
                    res = Math.max(res, bfs(grid, visited, i, j));
            }
        }
        return res;
    }
    int[][] moves = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
    private int bfs(int[][] grid, boolean[][] visited, int row, int col) {
        Queue<int[]> queue = new LinkedList<>();
        int res = 1;
        queue.add(new int[]{row, col});
        visited[row][col] = true;
        while(!queue.isEmpty()) {
            int[] curr = queue.poll();
            for(int[] move : moves) {
                int i = curr[0] + move[0];
                int j = curr[1] + move[1];
                if(isLegal(grid, i, j) && grid[i][j] == 1 && !visited[i][j]) {
                    visited[i][j] = true;
                    res++;
                    queue.add(new int[]{i, j});
                }
            }
        }
        return res;
    }
    
    private boolean isLegal(int[][] grid, int row, int col) {
        return row >= 0 && row < grid.length && col >= 0 && col < grid[row].length;
    }
}
