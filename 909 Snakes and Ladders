
class Solution {
    public int snakesAndLadders(int[][] board) {
        if(board == null || board.length == 0) return 0;
        int n = board.length;
        boolean[] visited = new boolean[n*n+1];
        //int min = n*n;
        int min = Integer.MAX_VALUE;
        
        Queue<Integer> queue = new ArrayDeque<>();
        queue.offer(1);
        
        int moves = 0;
        while(!queue.isEmpty()) {
            int size = queue.size();
            
            for(int i=0; i<size; i++) {
                int cur = queue.poll();
                if(cur == n*n) {
                    min = Math.min(min, moves);
                }
                
                for(int j=1; j<=6; j++) {
                    int num = cur + j;
                    if(num > n*n) break;
                    //if(num == cur) continue;
                    
                    int row = n-(num-1)/n-1;
                    int col = (n-row)%2 != 0? (num-1)%n : n-(num-1)%n-1;
                    if(board[row][col] == cur) continue;

                    if(!visited[num]) {
                        visited[num] = true;
                    
                        if(board[row][col] == -1) {
                        queue.offer(num);
                        } else {
                        queue.offer(board[row][col]);
                        }
                    }
                }
            }
            moves++;
        }
        return min == Integer.MAX_VALUE ? -1 : min;
    }
}
