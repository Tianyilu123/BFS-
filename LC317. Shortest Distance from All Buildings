
class Solution {
    private int[][] dirs = {{-1,0},{0,-1},{1,0},{0,1}};
    public int shortestDistance(int[][] grid) {
        if(grid == null || grid.length == 0) return -1;
        int rows = grid.length, cols = grid[0].length;
        
        int[][] canReach = new int[rows][cols];
        int[][] dists = new int[rows][cols];
        
        int Buildings = 0;
        for(int i=0; i<rows; i++) {
            for(int j=0; j<cols; j++) {
                if(grid[i][j] == 1) {
                    Buildings++;
                    bfs(grid, i, j, canReach, dists);
                }
            }
        }
        
        int minDist = Integer.MAX_VALUE;
        for(int i=0; i<rows; i++) {
            for(int j=0; j<cols; j++) {
                if(canReach[i][j] == Buildings && dists[i][j] < minDist) {
                    minDist = dists[i][j];
                }
            }
        }
        
        return minDist == Integer.MAX_VALUE ? -1: minDist;
    }
    
    private void bfs(int[][] grid, int row, int col, int[][] canReach, int[][] dists) {
        int rows = grid.length, cols = grid[0].length;
        Queue<int[]> queue = new LinkedList<>();
        boolean[][] visited = new boolean[rows][cols];
        int dist = 0;
        queue.offer(new int[]{row, col});
        visited[row][col] = true;
        
        while(!queue.isEmpty()) {
            dist++;
            int size = queue.size();
            for(int i=0; i<size; i++) {
                int[] cur = queue.poll();
                for(int[] dir : dirs) {
                    int ii = cur[0] + dir[0];
                    int jj = cur[1] + dir[1];
                    
                    if(!isValid(grid, ii, jj, visited)) continue;
                    
                    visited[ii][jj] = true;
                    queue.offer(new int[]{ii, jj});
                    dists[ii][jj] += dist;
                    canReach[ii][jj]++;
                }
            }
        }
    }
    
    private boolean isValid(int[][] grid, int ii, int jj, boolean[][] visited) {
        int rows = grid.length, cols = grid[0].length;
        if(ii<0 || ii>=rows || jj<0 || jj>=cols) return false;
        if(visited[ii][jj] == true) return false;
        if(grid[ii][jj] != 0) return false;
        return true;
    }
}
// O(m^2 * n^2), O(m*n)
