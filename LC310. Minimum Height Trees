
class Solution {
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        List<Integer> res = new ArrayList<>();
        if(n == 1){
            res.add(0);
            return res;
        }
        
        int nodePool = n;
        TreeNode[] trees = new TreeNode[n];
        
        for(int i=0; i<n; i++) {
            trees[i] = new TreeNode(i);
        }
        for(int[] edge : edges) {
            trees[edge[0]].addNei(edge[1]);
            trees[edge[1]].addNei(edge[0]);
        }
        
        Queue<Integer> queue = new LinkedList<>();
        for(int i=0; i<n; i++) {
            if(trees[i].isLeaf()) {
                queue.add(i);
                nodePool--;
            }
        }
        
        while(nodePool > 0) {
            int size = queue.size();
            while(size > 0) {
                size--;
                int cur = queue.poll();
                for(int i : trees[cur].nei) {
                    trees[i].removeNei(cur);
                    if(trees[i].isLeaf()) {
                        queue.offer(i);
                        nodePool--;
                    }
                }
            }
        }
        
        for(int i : queue) {
            res.add(i);
        }
        
        return res;
    }
    
    private class TreeNode {
        public HashSet<Integer> nei;
        public int val;
        
        public TreeNode(int val) {
            this.val = val;
            this.nei = new HashSet<>();
        }
        
        public boolean isLeaf() {
            return nei.size() == 1;
        }
        
        public void addNei(int val) {
            this.nei.add(val);
        }
        
        public void removeNei(int val) {
            this.nei.remove(val);
        }
    }
}

// time: O(n)
// space: O(n)
