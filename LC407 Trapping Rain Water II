
class Solution {
    private class Cell implements Comparable<Cell> {
        int i, j, height;
        
        public Cell(int i, int j, int height) {
            this.i = i;
            this.j = j;
            this.height = height;
        }
        
        public int compareTo(Cell that) {
            return this.height - that.height;
        }
    }
    
    public int trapRainWater(int[][] heightMap) {  //O(m*n*log(m+n))
        if(heightMap == null || heightMap.length == 0 || heightMap[0] == null ||
          heightMap[0].length <= 1) return 0;
        
        int row = heightMap.length, col = heightMap[0].length;
        PriorityQueue<Cell> heap = new PriorityQueue<Cell>();
        boolean[][] visited = new boolean[row][col];
        
        for(int i=0; i<row; i++) {
            for(int j=0; j<col; j++) {
                if(i==0 || j==0 || i==row-1 || j==col-1) {
                    visited[i][j] = true;
                    heap.offer(new Cell(i, j, heightMap[i][j]));
                }
            }
        }
        
        int[][] dirs = {{-1,0},{1,0},{0,-1},{0,1}};
        int ret = 0;
        
        while(!heap.isEmpty()) {
            Cell cur = heap.poll();
            for(int[] dir : dirs) {
                int rowIdx = cur.i + dir[0], colIdx = cur.j + dir[1];
                if(rowIdx>=0 && rowIdx<row && colIdx>=0 && colIdx<col && !visited[rowIdx][colIdx]) {
                    visited[rowIdx][colIdx] = true;
                    ret += Math.max(0, cur.height-heightMap[rowIdx][colIdx]);
                    heap.offer(new Cell(rowIdx, colIdx, Math.max(cur.height,
                                                                heightMap[rowIdx][colIdx])));
                }
            }
        }
        return ret;
    }
}
