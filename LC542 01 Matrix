
class Solution {
    public int[][] updateMatrix(int[][] matrix) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0) return null;
        int row = matrix.length, col = matrix[0].length;
        
        int[][] res = new int[row][col];
        Queue<Integer> queue = new LinkedList<>();        
        int minLen = 1;
        
        for(int i=0; i<row; i++) {
            for(int j=0; j<col; j++) {
                if(matrix[i][j] == 0) {
                    queue.offer(i*col + j);
                }
            }
        }
        
        while(!queue.isEmpty()) {
            int size = queue.size();
            
            while(size-- >0) {
                int cur = queue.poll();
                int[][] dirs = {{-1,0},{1,0},{0,-1},{0,1}};
                for(int[] dir : dirs) {
                    int ii = cur / col + dir[0];
                    int jj = cur % col + dir[1];
                    if(ii>=0 && ii<row && jj>=0 && jj<col && matrix[ii][jj]==1
                      && res[ii][jj] == 0) {
                        res[ii][jj] = minLen;
                        queue.offer(ii*col + jj);
                    }
                }
            }
            minLen++;
        }
        return res;
    }
}
